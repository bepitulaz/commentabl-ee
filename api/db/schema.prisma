datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  name                String           @default("Website owner")
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  webAuthnChallenge   String?          @unique
  credentials         UserCredential[]
  Website             Website[]
}

model UserCredential {
  id         String  @id
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

model Website {
  id         Int       @id @default(autoincrement())
  domain     String
  owner      User      @relation(fields: [ownerId], references: [id])
  ownerId    Int
  isArchived Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  Comment    Comment[]
  Author     Author[]

  @@index([domain])
}

model Comment {
  id          Int                 @id @default(autoincrement())
  website     Website             @relation(fields: [websiteId], references: [id])
  websiteId   Int
  link        String
  message     String
  parentId    Int?
  isSpam      Boolean             @default(false)
  isPublished Boolean             @default(false)
  isDeleted   Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime?
  // If createdBy and updatedBy is not null then it's a comment created by the admin
  createdBy   Int?
  updatedBy   Int?
  authors     AuthorsOnComments[]

  @@index([websiteId, link, parentId])
}

model Author {
  id        Int                 @id @default(autoincrement())
  name      String
  email     String?
  website   Website             @relation(fields: [websiteId], references: [id])
  websiteId Int
  createdAt DateTime            @default(now())
  updatedAt DateTime?
  comments  AuthorsOnComments[]

  @@index([name])
}

model AuthorsOnComments {
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  author    Author   @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  createdBy String

  @@id([commentId, authorId])
}
